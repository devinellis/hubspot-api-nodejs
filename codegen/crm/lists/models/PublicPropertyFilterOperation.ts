/**
 * Lists
 * CRUD operations to manage lists and list memberships
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { PublicTimePointOperationTimePoint } from '../models/PublicTimePointOperationTimePoint';

export class PublicPropertyFilterOperation {
    'operationType': string;
    'operator': string;
    'includeObjectsWithNoValueSet': boolean;
    'value': string;
    'requiresTimeZoneConversion': boolean;
    'timestamp': number;
    'upperBound': number;
    'lowerBound': number;
    'comparisonPropertyName': string;
    'defaultComparisonValue'?: string;
    'numberOfDays': number;
    'values': Array<string>;
    'year': number;
    'month': string;
    'day': number;
    'timeUnit': string;
    'fiscalYearStart'?: PublicPropertyFilterOperationFiscalYearStartEnum;
    'useFiscalYear'?: boolean;
    'timeUnitCount'?: number;
    'timePoint': PublicTimePointOperationTimePoint;
    'endpointBehavior'?: string;
    'propertyParser'?: string;
    'type': string;
    'lowerBoundEndpointBehavior'?: string;
    'upperBoundEndpointBehavior'?: string;
    'lowerBoundTimePoint': PublicTimePointOperationTimePoint;
    'upperBoundTimePoint': PublicTimePointOperationTimePoint;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "operationType",
            "baseName": "operationType",
            "type": "string",
            "format": ""
        },
        {
            "name": "operator",
            "baseName": "operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "includeObjectsWithNoValueSet",
            "baseName": "includeObjectsWithNoValueSet",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string",
            "format": ""
        },
        {
            "name": "requiresTimeZoneConversion",
            "baseName": "requiresTimeZoneConversion",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "upperBound",
            "baseName": "upperBound",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "lowerBound",
            "baseName": "lowerBound",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "comparisonPropertyName",
            "baseName": "comparisonPropertyName",
            "type": "string",
            "format": ""
        },
        {
            "name": "defaultComparisonValue",
            "baseName": "defaultComparisonValue",
            "type": "string",
            "format": ""
        },
        {
            "name": "numberOfDays",
            "baseName": "numberOfDays",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "values",
            "baseName": "values",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "year",
            "baseName": "year",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "month",
            "baseName": "month",
            "type": "string",
            "format": ""
        },
        {
            "name": "day",
            "baseName": "day",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "timeUnit",
            "baseName": "timeUnit",
            "type": "string",
            "format": ""
        },
        {
            "name": "fiscalYearStart",
            "baseName": "fiscalYearStart",
            "type": "PublicPropertyFilterOperationFiscalYearStartEnum",
            "format": ""
        },
        {
            "name": "useFiscalYear",
            "baseName": "useFiscalYear",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "timeUnitCount",
            "baseName": "timeUnitCount",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "timePoint",
            "baseName": "timePoint",
            "type": "PublicTimePointOperationTimePoint",
            "format": ""
        },
        {
            "name": "endpointBehavior",
            "baseName": "endpointBehavior",
            "type": "string",
            "format": ""
        },
        {
            "name": "propertyParser",
            "baseName": "propertyParser",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "lowerBoundEndpointBehavior",
            "baseName": "lowerBoundEndpointBehavior",
            "type": "string",
            "format": ""
        },
        {
            "name": "upperBoundEndpointBehavior",
            "baseName": "upperBoundEndpointBehavior",
            "type": "string",
            "format": ""
        },
        {
            "name": "lowerBoundTimePoint",
            "baseName": "lowerBoundTimePoint",
            "type": "PublicTimePointOperationTimePoint",
            "format": ""
        },
        {
            "name": "upperBoundTimePoint",
            "baseName": "upperBoundTimePoint",
            "type": "PublicTimePointOperationTimePoint",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PublicPropertyFilterOperation.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum PublicPropertyFilterOperationFiscalYearStartEnum {
    January = 'JANUARY',
    February = 'FEBRUARY',
    March = 'MARCH',
    April = 'APRIL',
    May = 'MAY',
    June = 'JUNE',
    July = 'JULY',
    August = 'AUGUST',
    September = 'SEPTEMBER',
    October = 'OCTOBER',
    November = 'NOVEMBER',
    December = 'DECEMBER'
}

